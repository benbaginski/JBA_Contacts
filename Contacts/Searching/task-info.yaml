type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;


    import java.util.Scanner;

    public class Main {
        public static class UserInterface {
            //Runs the Dialog Prompt that the user interacts with.

            Scanner scanner = new Scanner(System.in);
            PhoneBook phoneBook;
            String input = "";

            public void dialogPrompt() {
                do {
                    System.out.print("Enter action (add, remove, edit, count, list, exit): ");
                    input = scanner.nextLine().replace(" ", "");
                    switch (input) {
                        case "add":
                            phoneBook.add();
                            break;
                        case "remove":
                            phoneBook.remove();
                            break;
                        case "edit":
                            phoneBook.edit();
                            break;
                        case "count":
                            phoneBook.count();
                            break;
                        case "list":
                            phoneBook.list();
                            break;
                        case "exit":
                            break;
                        default:
                            System.out.println("Invalid Command!");
                    }

                } while (input.compareTo("exit") != 0);
            }

            public UserInterface(PhoneBook phoneBook) {
                this.phoneBook = phoneBook;
            }

        }

        public static void main(String[] args) {
            PhoneBook phoneBook = new PhoneBook();
            UserInterface userInterface = new UserInterface(phoneBook);
            userInterface.dialogPrompt();
        }
    }
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Contact {
        private String firstName;
        private String lastName;
        private String phoneNumber;

        public String getFirstName() {
            return firstName;
        }

        public void setFirstName(String firstName) {
            this.firstName = firstName;
        }

        public String getLastName() {
            return lastName;
        }

        public void setLastName(String lastName) {
            this.lastName = lastName;
        }

        public boolean hasNumber() {
            return phoneNumber.compareTo("") != 0;
        }

        public String getPhoneNumber() {
            return hasNumber() ? phoneNumber : "[no number]";
        }

        public void setPhoneNumber(String phoneNumber) {
            if (isValidPhoneNumber(phoneNumber)) this.phoneNumber = phoneNumber;
            else {
                System.out.println("Wrong number format!");
                this.phoneNumber = "";
            }
        }

        private boolean isValidPhoneNumber(String phoneNumber) {
            //Group 1 has parens
            Pattern pattern = Pattern.compile("^(\\+)?(\\(\\w+\\))([ -]\\w{2,})*$");
            //Group 2 has parens
            Pattern pattern2 = Pattern.compile("^(\\+)?(\\w+)([ -]\\(\\w{2,}\\))([ -]\\w{2,})*$");
            //No paren groups
            Pattern pattern3 = Pattern.compile("^(\\+)?(\\w+)([ -]\\w{2,})*$");
            Matcher matcher = pattern.matcher(phoneNumber);
            Matcher matcher2 = pattern2.matcher(phoneNumber);
            Matcher matcher3 = pattern3.matcher(phoneNumber);

            //If only one of the patterns matches, but not all.
            return matcher.find() ^ matcher2.find() ^ matcher3.find();
        }

        public Contact(String firstName, String lastName, String phoneNumber) {
            setLastName(lastName);
            setFirstName(firstName);
            setPhoneNumber(phoneNumber);
        }

        public String toString() {
            return getFirstName() + " " + getLastName() + ", " + getPhoneNumber();
        }


    }
  learner_created: false
- name: src/contacts/PhoneBook.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class PhoneBook {
        ArrayList<Contact> contactList = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);

        public void add() {
            System.out.print("Enter the name: ");
            String firstName = scanner.nextLine();
            System.out.print("Enter the surname: ");
            String lastName = scanner.nextLine();
            System.out.print("Enter the number: ");
            String phoneNumber = scanner.nextLine();
            contactList.add(new Contact(firstName, lastName, phoneNumber));
            System.out.println("The record added.");
        }

        public void remove() {
            if (contactList.size() <= 0) {
                System.out.println("No records to remove!");
                return;
            }

            list();
            System.out.print("Select a record: ");

            int index = scanner.nextInt();
            if (index <= contactList.size()) {
                contactList.remove(index - 1);
                System.out.println("The record removed!");
            } else System.out.println("Invalid Record Index!");
        }

        public void edit() {
            if (contactList.size() <= 0) {
                System.out.println("No records to edit!");
                return;
            }

            list();
            System.out.print("Select a record: ");
            int index = scanner.nextInt();
            scanner.nextLine();

            System.out.print("Select a field (name, surname, number): ");
            String editField = scanner.nextLine();

            switch (editField) {
                case "name":
                    System.out.print("Enter name: ");
                    contactList.get(index - 1).setFirstName(scanner.nextLine());
                    break;
                case "surname":
                    System.out.print("Enter surname: ");
                    contactList.get(index - 1).setLastName(scanner.nextLine());
                    break;
                case "number":
                    System.out.print("Enter number: ");
                    contactList.get(index - 1).setPhoneNumber(scanner.nextLine());
                    break;
                default:
                    System.out.println("Invalid Field!");
            }
        }

        public void count() {
            System.out.println("The Phone Book has " + contactList.size() + " records.");
        }

        public void list() {
            if (contactList.size() <= 0) {
                System.out.println("No records to list!");
            } else {
                for (int i = 0; i < contactList.size(); i++) {
                    System.out.println(i + 1 + ". " + contactList.get(i));
                }
            }
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, int needSize) {\n        if (actualSize < needSize) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain at least\
    \ %d actions, but you have only %d. \" +\n                            \"You should\
    \ separate your actions with an empty line.\",\n                    needSize,\n\
    \                    actualSize));\n        } else {\n            return null;\n\
    \        }\n    }\n    \n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"I didn't see where \\\"\
    Enter action\\\" part in the responsesFromClient\");\n                    }\n\
    \                    return CheckResult.correct();\n                })),\n\n \
    \           new TestCase<TestClue>()\n                .setInput(\n           \
    \         \"count\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"0 records\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    0 records\\\" part \" +\n                                \"in the responsesFromClient\
    \ in a place where it should be\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n          \
    \          \n                    String infoBlock = blocks[2];\n             \
    \       if (!infoBlock.contains(\"Name: John\")\n                        || !infoBlock.contains(\"\
    Surname: Smith\")\n                        || !infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Gender: [no data]\"\
    )\n                        || !infoBlock.contains(\"Number: 123 456 789\")\n \
    \                       || !infoBlock.contains(\"Time created:\")\n          \
    \              || !infoBlock.contains(\"Time last edit:\")) {\n              \
    \          return new CheckResult(false,\n                            \"Something\
    \ wrong with printing user info\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n    \n                    String\
    \ infoBlock = blocks[2];\n                    if (!infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                        || !infoBlock.contains(\"Address:\
    \ Wall St. 1\")\n                        || !infoBlock.contains(\"Number: +0 (123)\
    \ 456-789-9999\")\n                        || !infoBlock.contains(\"Time created:\"\
    )\n                        || !infoBlock.contains(\"Time last edit:\")) {\n  \
    \                      return new CheckResult(false,\n                       \
    \     \"Something wrong with printing organization info\");\n                \
    \    }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"person\\n\" +\n          \
    \              \"John\\n\" +\n                        \"Smith\\n\" +\n       \
    \                 \"\\n\" +\n                        \"\\n\" +\n             \
    \           \"123 456 789\\n\" +\n                    \"list\\n\" +\n        \
    \            \"1\\n\" +\n                    \"edit\\n\" +\n                 \
    \       \"gender\\n\" +\n                        \"M\\n\" +\n                \
    \    \"menu\\n\" +\n                    \"list\\n\" +\n                    \"\
    1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\")\n \
    \               .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 6);\n              \
    \      if (feedback != null) return feedback;\n    \n                    String\
    \ infoBlock = blocks[5];\n                    if (!infoBlock.contains(\"Name:\
    \ John\")\n                        || !infoBlock.contains(\"Surname: Smith\")\n\
    \                        || !infoBlock.contains(\"Birth date: [no data]\")\n \
    \                       || !infoBlock.contains(\"Gender: M\")\n              \
    \          || !infoBlock.contains(\"Number: 123 456 789\")\n                 \
    \       || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person is not\
    \ working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"list\\n\" +\n                    \"1\\n\" +\n           \
    \         \"edit\\n\" +\n                        \"address\\n\" +\n          \
    \              \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n       \
    \             \"list\\n\" +\n                    \"1\\n\" +\n                \
    \    \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n          \
    \          \n                    String infoBlock = blocks[5];\n             \
    \       if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n         \
    \               || !infoBlock.contains(\"Address: Wall St 2\")\n             \
    \           || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\")\n      \
    \                  || !infoBlock.contains(\"Time created:\")\n               \
    \         || !infoBlock.contains(\"Time last edit:\")) {\n                   \
    \     return new CheckResult(false,\n                            \"Editing organization\
    \ is not working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"add\\n\" +\n                        \"person\\n\" +\n   \
    \                     \"John\\n\" +\n                        \"Smith\\n\" +\n\
    \                        \"\\n\" +\n                        \"\\n\" +\n      \
    \                  \"123 456 789\\n\" +\n                    \"add\\n\" +\n  \
    \                      \"organization\\n\" +\n                        \"PizzaNuts\\\
    n\" +\n                        \"Wall St. 6\\n\" +\n                        \"\
    +0 (123) 456-789-9999\\n\" +\n                    \"search\\n\" +\n          \
    \              \"pizz\\n\" +\n                    \"1\\n\" +\n               \
    \     \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n    \n    \
    \                \n                    String infoBlock = blocks[3];\n       \
    \             if (!infoBlock.contains(\"Pizza Shop\")\n                      \
    \  || !infoBlock.contains(\"PizzaNuts\")\n                        || infoBlock.contains(\"\
    John\")) {\n                        return new CheckResult(false,\n          \
    \                  \"Search is not working\");\n                    }\n      \
    \              return CheckResult.correct();\n                })),\n\n       \
    \     new TestCase<TestClue>()\n                .setInput(\n                 \
    \   \"add\\n\" +\n                        \"organization\\n\" +\n            \
    \            \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n\
    \                        \"+0 (123) 456-789-9999\\n\" +\n                    \"\
    add\\n\" +\n                        \"person\\n\" +\n                        \"\
    John\\n\" +\n                        \"Smith\\n\" +\n                        \"\
    \\n\" +\n                        \"\\n\" +\n                        \"123 456\
    \ 789\\n\" +\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"PizzaNuts\\n\" +\n                        \"\
    Wall St. 6\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"search\\n\" +\n                        \"s\\n\" +\n     \
    \               \"1\\n\" +\n                    \"menu\\n\" +\n              \
    \      \"exit\")\n                .setAttach(new TestClue(output -> {\n      \
    \              String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                    var feedback = splitActionsFeedback(blocks.length, 4);\n\
    \                    if (feedback != null) return feedback;\n                \
    \    \n                    String infoBlock = blocks[3];\n                   \
    \ if (!infoBlock.contains(\"Pizza Shop\")\n                        || !infoBlock.contains(\"\
    John Smith\")\n                        || !infoBlock.contains(\"PizzaNuts\"))\
    \ {\n                        return new CheckResult(false,\n                 \
    \           \"Search is not working\");\n                    }\n             \
    \       return CheckResult.correct();\n                })),\n\n        new TestCase<TestClue>()\n\
    \            .setInput(\n                \"add\\n\" +\n                    \"\
    organization\\n\" +\n                    \"Pizza Shop\\n\" +\n               \
    \     \"Wall St. 1\\n\" +\n                    \"+0 (123) 456-789-9999\\n\" +\n\
    \                \"add\\n\" +\n                    \"person\\n\" +\n         \
    \           \"John\\n\" +\n                    \"Smith\\n\" +\n              \
    \      \"\\n\" +\n                    \"\\n\" +\n                    \"123 456\
    \ 789\\n\" +\n                \"add\\n\" +\n                    \"organization\\\
    n\" +\n                    \"PizzaNuts\\n\" +\n                    \"Wall St.\
    \ 6\\n\" +\n                    \"+0 (123) 456-781-9999\\n\" +\n             \
    \   \"search\\n\" +\n                    \"789\\n\" +\n                \"1\\n\"\
    \ +\n                \"menu\\n\" +\n                \"exit\")\n            .setAttach(new\
    \ TestClue(output -> {\n                String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                if (feedback != null) return feedback;\n    \n        \
    \        String infoBlock = blocks[3];\n                if (!infoBlock.contains(\"\
    Pizza Shop\")\n                    || !infoBlock.contains(\"John Smith\")\n  \
    \                  || infoBlock.contains(\"PizzaNuts\")) {\n                 \
    \   return new CheckResult(false,\n                        \"Search by phone number\
    \ is not working\");\n                }\n                return CheckResult.correct();\n\
    \            }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/ContactType.java
  visible: true
  text: |
    package contacts;

    public enum ContactType {
        PERSON, ORGANIZATION
    }
  learner_created: true
- name: src/contacts/PersonFactory.java
  visible: true
  text: |
    package contacts;

    public class PersonFactory extends ContactFactory {

        @Override
        public Contact createContact() {
            Person person = new Person();
            System.out.print("Enter the name: ");
            person.setFirstName(scanner.nextLine());
            System.out.print("Enter the surname: ");
            person.setLastName(scanner.nextLine());
            System.out.print("Enter the birth date: ");
            person.setBirthdate(scanner.nextLine());
            System.out.print("Enter the gender (M,F): ");
            person.setGender(scanner.nextLine());
            System.out.print("Enter the number: ");
            person.setPhoneNumber(scanner.nextLine());
            System.out.print("The record added.\n");
            return person;
        }
    }
  learner_created: true
- name: src/contacts/Organization.java
  visible: true
  text: |
    package contacts;

    import java.util.Scanner;

    public class Organization extends Contact {

        private String address = "[no data]";
        private String orgName = "[no data]";

        //Getters & Setters
        public String getAddress() {
            return address;
        }

        public void setAddress(String address) {
            this.address = address;
            setLastEdit();
        }

        public String getOrgName() {
            return orgName;
        }

        public void setOrgName(String orgName) {
            this.orgName = orgName;
            setLastEdit();
        }

        //Constructors
        public Organization(String orgName, String address, String number) {
            super(number);
            this.address = address;
            this.orgName = orgName;
        }

        public Organization() {
            super();
        }

        //Methods
        public String toString() {
            return "Organization name: " + getOrgName()
                    + "\nAddress: " + getAddress()
                    + "\nNumber: " + getPhoneNumber()
                    + "\nTime created: " + getCreated()
                    + "\nTime last edit: " + getLastEdit();
        }

        @Override
        public String returnName() {
            return orgName;
        }

        @Override
        public void edit() {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Select a field (Organization, address, number): ");
            String editField = scanner.nextLine();

            switch (editField) {
                case "organization":
                    setOrgName(scanner.nextLine());
                    break;
                case "address":
                    setAddress(scanner.nextLine());
                    break;
                case "number":
                    setPhoneNumber(scanner.nextLine());
                    break;
                default:
                    System.out.println("Invalid field!");
            }
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;
    import java.util.Scanner;

    public class Person extends Contact {

        private String firstName = "[no data]";
        private String lastName = "[no data]";
        private String gender = "[no data]";
        private LocalDate birthDate;

        //Getters & Setters
        public String getFirstName() {
            return firstName;
        }

        public void setFirstName(String firstName) {
            this.firstName = firstName;
            setLastEdit();
        }

        public String getLastName() {
            return lastName;
        }

        public void setLastName(String lastName) {
            this.lastName = lastName;
            setLastEdit();
        }

        public String getGender() {
            return gender;
        }

        public void setGender(String gender) {
            if (gender.toUpperCase().equals("M") || gender.toUpperCase().equals("F")) {
                this.gender = gender.toUpperCase();
                setLastEdit();
            } else System.out.println("Bad gender!");
        }

        public String getBirthDate() {
            if (birthDate == null) return "[no data]";
            else return birthDate.toString();
        }

        public void setBirthDate(LocalDate birthDate) {
            this.birthDate = birthDate;
            setLastEdit();
        }

        public void setBirthdate(String birthdate) {
            try {
                setBirthDate(LocalDate.parse(birthdate));
            } catch (Exception e) {
                this.birthDate = null;
                System.out.println("Bad birth date!");
            }
        }

        //Constructor
        public Person(String firstName, String lastName, String gender, String birthDate, String phoneNumber) {
            super(phoneNumber);
            this.firstName = firstName;
            this.lastName = lastName;
            this.gender = gender;
            setBirthdate(birthDate);
        }

        public Person() {
            super();
        }

        //Methods
        public String toString() {
            return "Name: " + getFirstName()
                    + "\nSurname: " + getLastName()
                    + "\nBirth date: " + getBirthDate()
                    + "\nGender: " + getGender()
                    + "\nNumber: " + getPhoneNumber()
                    + "\nTime created: " + getCreated()
                    + "\nTime last edit: " + getLastEdit();
        }

        @Override
        public String returnName() {
            return firstName + " " + lastName;
        }

        @Override
        public void edit() {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Select a field (name, surname, birth, gender, number): ");
            String editField = scanner.nextLine();

            switch (editField) {
                case "name":
                    System.out.print("Enter name: ");
                    setFirstName(scanner.nextLine());
                    break;
                case "surname":
                    System.out.print("Enter surname: ");
                    setLastName(scanner.nextLine());
                    break;
                case "birth":
                    System.out.print("Enter birthdate: ");
                    setBirthdate(scanner.nextLine());
                    break;
                case "gender":
                    System.out.print("Enter gender: ");
                    setGender(scanner.nextLine());
                    break;
                case "number":
                    System.out.print("Enter number: ");
                    setPhoneNumber(scanner.nextLine());
                    break;
                default:
                    System.out.println("Invalid Field!");
            }
        }
    }
  learner_created: true
- name: src/contacts/UserInterface.java
  visible: true
  text: |-
    package contacts;

    import java.util.Scanner;

    //Runs the Dialog Prompt that the user interacts with.
    public class UserInterface {

        Scanner scanner = new Scanner(System.in);
        PhoneBook phoneBook;
        String input = "";

        public void dialogPrompt() {
            do {
                System.out.print("\nEnter action (add, remove, edit, count, info, exit): ");
                input = scanner.nextLine().replace(" ", "");
                switch (input) {
                    case "add":
                        phoneBook.add();
                        break;
                    case "remove":
                        phoneBook.remove();
                        break;
                    case "edit":
                        phoneBook.edit();
                        break;
                    case "count":
                        phoneBook.count();
                        break;
                    case "info":
                        phoneBook.info();
                        break;
                    case "exit":
                        break;
                    default:
                        System.out.println("Invalid Command!");
                }

            } while (input.compareTo("exit") != 0);
        }

        public UserInterface(PhoneBook phoneBook) {
            this.phoneBook = phoneBook;
        }

    }
  learner_created: true
- name: src/contacts/ContactFactory.java
  visible: true
  text: |
    package contacts;

    import java.util.Scanner;

    abstract class ContactFactory {

        Scanner scanner = new Scanner(System.in);

        abstract Contact createContact();
    }
  learner_created: true
- name: src/contacts/OrganizationFactory.java
  visible: true
  text: |
    package contacts;

    public class OrganizationFactory extends ContactFactory {

        @Override
        public Contact createContact() {
            Organization organization = new Organization();
            System.out.print("Enter the organization name: ");
            organization.setOrgName(scanner.nextLine());
            System.out.print("Enter the address: ");
            organization.setAddress(scanner.nextLine());
            System.out.print("Enter the number: ");
            organization.setPhoneNumber(scanner.nextLine());
            System.out.print("The record added.\n");
            return organization;
        }
    }
  learner_created: true
- name: src/contacts/ContactList.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/43/stages/231/implement">JetBrains
    Academy</a>
  time: Fri, 21 Aug 2020 17:40:30 UTC
record: -1
